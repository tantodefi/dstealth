/**
 * Production dStealth Agent with Action Button Support
 * 
 * Core Features:
 * 1. FluidKey signup with referral code  
 * 2. fkey.id setting and management
 * 3. Payment link generation + ZK receipts
 * 4. Coinbase Wallet action buttons (Actions/Intent support)
 * 5. Smart group chat behavior with @mentions
 */

import { agentDb } from '../lib/agent-database.js';
import { daimoPayClient } from '../lib/daimo-pay.js';
import { createSigner, getEncryptionKeyFromHex } from '../helper.js';
import { Group, Client, type XmtpEnv } from '@xmtp/node-sdk';
import { 
  ReactionCodec, 
  type Reaction,
  ContentTypeReaction
} from '@xmtp/content-type-reaction';
import {
  type ContentCodec,
  ContentTypeId,
  type EncodedContent,
} from "@xmtp/content-type-primitives";

// Action button content types (from working example)
export const ContentTypeActions = new ContentTypeId({
  authorityId: 'coinbase.com',
  typeId: 'actions',
  versionMajor: 1,
  versionMinor: 0,
});

export const ContentTypeIntent = new ContentTypeId({
  authorityId: 'coinbase.com',
  typeId: 'intent',
  versionMajor: 1,
  versionMinor: 0,
});

// Action button types (from working example)
interface Action {
  id: string;
  label: string;
  imageUrl?: string;
  style?: 'primary' | 'secondary' | 'danger';
  expiresAt?: string;
}

interface ActionsContent {
  id: string;
  description: string;
  actions: Action[];
  expiresAt?: string;
}

interface IntentContent {
  id: string;
  actionId: string;
  metadata?: Record<string, string | number | boolean | null>;
}

// Action button codecs (from working example)
export class ActionsCodec implements ContentCodec<ActionsContent> {
  get contentType(): ContentTypeId {
    return ContentTypeActions;
  }

  encode(content: ActionsContent): EncodedContent {
    return {
      type: ContentTypeActions,
      parameters: { encoding: 'UTF-8' },
      content: new TextEncoder().encode(JSON.stringify(content)),
    };
  }

  decode(content: EncodedContent): ActionsContent {
    const encoding = content.parameters.encoding;
    if (encoding && encoding !== 'UTF-8') {
      throw new Error(`Unsupported encoding: ${encoding}`);
    }
    return JSON.parse(new TextDecoder().decode(content.content));
  }

  fallback(content: ActionsContent): string {
    const actionList = content.actions
      .map((action, index) => `[${index + 1}] ${action.label}`)
      .join('\n');
    return `${content.description}\n\n${actionList}\n\nReply with the number to select`;
  }

  shouldPush(): boolean {
    return true;
  }
}

export class IntentCodec implements ContentCodec<IntentContent> {
  get contentType(): ContentTypeId {
    return ContentTypeIntent;
  }

  encode(content: IntentContent): EncodedContent {
    return {
      type: ContentTypeIntent,
      parameters: { encoding: 'UTF-8' },
      content: new TextEncoder().encode(JSON.stringify(content)),
    };
  }

  decode(content: EncodedContent): IntentContent {
    const encoding = content.parameters.encoding;
    if (encoding && encoding !== 'UTF-8') {
      throw new Error(`Unsupported encoding: ${encoding}`);
    }
    return JSON.parse(new TextDecoder().decode(content.content));
  }

  fallback(content: IntentContent): string {
    return `Intent: ${content.actionId}`;
  }

  shouldPush(): boolean {
    return true;
  }
}

/**
 * Production dStealth Agent with action button support
 */
export class DStealthAgentProduction {
  private client: Client | null = null;
  private agentAddress: string | null = null;
  private processedMessageCount = 0;
  private groupIntroductions: Set<string> = new Set();

  // Track the latest action set ID for each user to invalidate old buttons
  private userLatestActionSetId: Map<string, string> = new Map();

  // Track processed intent messages to prevent duplicates
  private processedIntentIds: Set<string> = new Set();

  // Configuration
  private readonly FLUIDKEY_REFERRAL_URL = "https://app.fluidkey.com/?ref=62YNSG";
  private readonly DSTEALTH_APP_URL = "https://dstealth.xyz";
  private readonly OPENAI_API_KEY = process.env.OPENAI_API_KEY;

  /**
   * Create and start the dStealth Agent
   */
  static async createAndStart(
    config: any,
    streamFailureCallback?: any,
  ): Promise<DStealthAgentProduction> {
    console.log("üöÄ Starting dStealth Agent with action button support");
    const agent = new DStealthAgentProduction();
    await agent.initialize(config, streamFailureCallback);
    return agent;
  }

  /**
   * Initialize agent with action button support
   */
  private async initialize(config: any, streamFailureCallback?: any): Promise<void> {
    try {
      console.log("ü§ñ Initializing dStealth Agent with action button support...");

      // Create XMTP client with action button codecs (from working example)
      const signer = createSigner(config.walletKey);
      const dbEncryptionKey = getEncryptionKeyFromHex(config.encryptionKey);
      
      console.log("üîß Registering action button codecs:");
      console.log("   - coinbase.com/actions:1.0");
      console.log("   - coinbase.com/intent:1.0");
      console.log("   - xmtp.org/reaction:1.0");
      
      // Create client with codecs for action buttons
      this.client = await Client.create(signer, {
        dbEncryptionKey,
        env: config.env as XmtpEnv,
        dbPath: config.dbPath,
        codecs: [new ActionsCodec(), new IntentCodec(), new ReactionCodec()],
      });

      const identifier = await signer.getIdentifier();
      this.agentAddress = identifier.identifier;

      console.log(`üìß Agent Address: ${this.agentAddress}`);
      console.log(`üÜî Agent Inbox ID: ${this.client.inboxId}`);

      // Sync conversations
      console.log("üîÑ Syncing conversations...");
      await this.client.conversations.sync();

      // Start message streaming
      this.startMessageStream(streamFailureCallback);

      console.log("‚úÖ dStealth Agent initialized with action button support");
    } catch (error) {
      console.error("‚ùå Failed to initialize dStealth Agent:", error);
      throw error;
    }
  }

  /**
   * Start message streaming (from working example pattern)
   */
  private async startMessageStream(streamFailureCallback?: any): Promise<void> {
    if (!this.client) return;

    console.log("üëÇ Listening for messages...");
    
    // Keep the agent running with proper error handling (from working example)
    while (true) {
      try {
        const stream = await this.client.conversations.streamAllMessages();

        for await (const message of stream) {
          try {
            // Skip messages from the agent itself
            if (!message || message.senderInboxId.toLowerCase() === this.client.inboxId.toLowerCase()) {
              continue;
            }

            console.log(`üì® Received: ${message.contentType?.typeId} from ${message.senderInboxId}`);

            const conversation = await this.client.conversations.getConversationById(
              message.conversationId
            );

            if (!conversation) {
              console.log("‚ùå Unable to find conversation, skipping");
              continue;
            }

            // Process message with contentType detection (key for action buttons)
            await this.processMessage(message, conversation);

          } catch (messageError: unknown) {
            const errorMessage = messageError instanceof Error ? messageError.message : String(messageError);
            console.error("‚ùå Error processing individual message:", errorMessage);
          }
        }
      } catch (streamError: unknown) {
        const errorMessage = streamError instanceof Error ? streamError.message : String(streamError);
        console.error("‚ùå Stream error:", errorMessage);
        
        // Auto-restart
        console.log("üîÑ Reconnecting in 5 seconds...");
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        try {
          await this.client.conversations.sync();
        } catch (syncError) {
          console.error("‚ùå Failed to sync conversations:", syncError);
        }
      }
    }
  }

  /**
   * Process messages with action button support (key method from working example)
   */
  private async processMessage(message: any, conversation: any): Promise<void> {
    try {
      if (!this.client) return;

              this.processedMessageCount++;

      // Get sender info
      const inboxState = await this.client.preferences.inboxStateFromInboxIds([
        message.senderInboxId,
      ]);
      const senderAddress = inboxState[0]?.identifiers[0]?.identifier;
      const senderInboxId = message.senderInboxId;

      // CRITICAL: Handle Intent messages from action buttons (from working example)
      if (message.contentType?.typeId === "intent") {
        console.log("üéØ Intent message detected - action button was clicked!");
        console.log("üìã Intent content:", JSON.stringify(message.content, null, 2));
        
        const intent = message.content as IntentContent;
        const response = await this.handleIntentMessage(intent, senderInboxId);
        if (response) {
          await conversation.send(response);
          console.log("‚úÖ Intent response sent");
        }
        return;
      }

      // Handle text messages  
      if (message.contentType?.typeId === "text") {
        // Send ninja reaction
        try {
          const reaction: Reaction = {
            reference: message.id,
            action: "added",
            content: "ü•∑",
            schema: "unicode"
          };
          await conversation.send(reaction, ContentTypeReaction);
        } catch (reactionError) {
          console.error("‚ö†Ô∏è Failed to send ninja reaction:", reactionError);
        }

        // Check if message should be processed
        const isGroup = conversation instanceof Group;
        const shouldProcess = await this.shouldProcessMessage(
          message.content,
          senderInboxId,
          isGroup,
          conversation.id
        );

        if (!shouldProcess) {
          return;
        }

        // Process the message with our dStealth logic
        const response = await this.processTextMessage(message.content, senderInboxId, isGroup);
        if (response) {
          await conversation.send(response);
        }
        return;
      }

    } catch (error) {
      console.error("‚ùå Error processing message:", error);
    }
  }

  /**
   * Process text messages with dStealth agent logic
   */
  private async processTextMessage(messageContent: string, senderInboxId: string, isGroup: boolean): Promise<string | undefined> {
    try {
      console.log(`üìù Processing text message: "${messageContent}" from ${senderInboxId}`);
      
      // Handle fkey.id setting commands
      if (this.isFkeySetCommand(messageContent)) {
        return await this.handleFkeySetCommand(messageContent, senderInboxId, isGroup);
      }

      // Handle fkey status queries
      if (this.isFkeyStatusQuery(messageContent)) {
        return await this.handleFkeyStatusQuery(senderInboxId, isGroup);
      }

      // Handle commands (starts with /)
      if (messageContent.startsWith('/')) {
        return await this.handleCommand(messageContent, senderInboxId, isGroup);
      }

      // Handle payment amount requests
      const paymentAmount = this.extractPaymentAmount(messageContent);
      if (paymentAmount) {
        return await this.handlePaymentRequest(paymentAmount, senderInboxId, "conversation", isGroup);
      }

      // Handle fkey.id pattern (e.g., "tantodefi.fkey.id")
      if (this.isFkeyIdPattern(messageContent)) {
        return await this.handleFkeyIdSubmission(messageContent, senderInboxId);
      }

      // Handle general messages with OpenAI or basic responses
      return await this.processGeneralMessage(messageContent, senderInboxId, isGroup);

    } catch (error) {
      console.error("‚ùå Error processing text message:", error);
      return "‚ùå Error processing your message. Please try again.";
    }
  }

  /**
   * Get client for action button methods
   */
  getClient(): Client | null {
    return this.client;
  }

  /**
   * Get agent status
   */
  getStatus() {
    return {
      isRunning: !!this.client,
              processedMessageCount: this.processedMessageCount,
      agentAddress: this.agentAddress,
    };
  }

  /**
   * üîß NEW: Check if message content is Intent content type
   */
  private isIntentContent(content: any): content is IntentContent {
    // First check if content is an object before using 'in' operator
    if (!content || typeof content !== 'object' || content === null) {
      return false;
    }
    
    console.log(`üîç Checking if content is Intent:`, {
      exists: !!content,
      type: typeof content,
      isObject: typeof content === 'object',
      hasId: 'id' in content,
      hasActionId: 'actionId' in content,
      idType: content.id ? typeof content.id : 'undefined',
      actionIdType: content.actionId ? typeof content.actionId : 'undefined',
    });
    
    const result = 'id' in content && 
                   'actionId' in content &&
                   typeof content.id === 'string' &&
                   typeof content.actionId === 'string';
           
    console.log(`üîç Intent check result: ${result}`);
    return result;
  }

  /**
   * üîß UPDATED: Enhanced message processing logic for group chats
   */
  private async shouldProcessMessage(messageContent: string, senderInboxId: string, isGroup: boolean, conversationId: string): Promise<boolean> {
    try {
      const trimmed = messageContent.trim().toLowerCase();
      
      // Get conversation info to determine if it's a group or DM
      const client = this.client;
      if (!client) {
        console.log("üîá No client available for conversation check");
        return false;
      }

      const conversation = await client.conversations.getConversationById(conversationId);
      if (!conversation) {
        console.log("üîá Conversation not found");
        return false;
      }

      const isActualGroup = conversation instanceof Group;
      
      if (isActualGroup) {
        // üîß FIXED: Group chat logic - VERY restrictive - only @mentions
        
        // Always send welcome message if not sent yet
        if (!this.groupIntroductions.has(conversationId)) {
          console.log("üëã Sending group introduction");
          this.groupIntroductions.add(conversationId); // Mark as sent immediately
          return true;
        }

        // üîß STRICT: Only respond to explicit @mentions in groups
        const hasExplicitMention = trimmed.includes('@dstealth') || 
                                   trimmed.includes('@dstealth.eth') ||
                                   trimmed.includes('@dstealth.base.eth');
        
        if (hasExplicitMention) {
          console.log("üì¢ Group message has explicit @dstealth mention - will process");
          return true;
        }

        // üîß REMOVED: Payment trigger logic for groups - only @mentions allowed
        console.log("üîá Group message lacks @mention - ignoring");
        return false;
      } else {
        // In DMs: Always process
        console.log("üí¨ DM - will process");
          return true;
      }
    } catch (error) {
      console.error("‚ùå Error checking if message should be processed:", error);
      // Default to NOT processing in groups if we can't determine
      return !isGroup;
    }
  }

  /**
   * üîß NEW: Check if message is a fkey.id setting command
   */
  private isFkeySetCommand(content: string): boolean {
    const trimmed = content.trim().toLowerCase();
    return trimmed.startsWith('/set ') || 
           trimmed.startsWith('my fkey is ') ||
           trimmed.startsWith('my fkey.id is ');
  }

  /**
   * üîß NEW: Check if message is asking about fkey status
   */
  private isFkeyStatusQuery(content: string): boolean {
    const trimmed = content.trim().toLowerCase();
    return trimmed.includes('what') && trimmed.includes('my') && trimmed.includes('fkey') ||
           trimmed.includes('what is my fkey') ||
           trimmed.includes('what\'s my fkey') ||
           trimmed.includes('whats my fkey') ||
           trimmed.includes('my fkey status') ||
           trimmed.includes('fkey status') ||
           trimmed.includes('current fkey') ||
           trimmed.includes('show my fkey');
  }

  /**
   * üîß NEW: Handle fkey status queries
   */
  private async handleFkeyStatusQuery(senderInboxId: string, isGroup: boolean): Promise<string> {
    try {
          const userData = await agentDb.getStealthDataByUser(senderInboxId);
      
      if (!userData?.fkeyId) {
        return `üîç **No fkey.id Set**

You haven't set up your fkey.id yet!

**üöÄ Get Started:**
1. üîë **Get FluidKey**: ${this.FLUIDKEY_REFERRAL_URL}
2. üìù **Set your fkey.id**: \`/set yourUsername\`
3. üöÄ **Complete setup**: ${this.DSTEALTH_APP_URL}

**Examples:**
‚Ä¢ \`/set tantodefi\`
‚Ä¢ \`my fkey is tantodefi\`

**Need help?** Type \`/help\` for all commands!`;
      }

      // üîß SECURITY: Get fresh user data with current address verification
      const freshData = await this.getFreshUserStealthData(senderInboxId);
      
      if (!freshData) {
        return `‚ùå **Setup Issues**

Your fkey.id **${userData.fkeyId}** needs verification.

**Please re-verify**: \`/set ${userData.fkeyId}\`
**Or get FluidKey**: ${this.FLUIDKEY_REFERRAL_URL}`;
      }

      if (freshData.error) {
        return `‚ùå **fkey.id Verification Failed**

**Your fkey.id**: ${userData.fkeyId}  
**Error**: ${freshData.error}

**Fix this by:**
‚Ä¢ Re-verify: \`/set ${userData.fkeyId}\`
‚Ä¢ Check your FluidKey profile is public
‚Ä¢ Get FluidKey: ${this.FLUIDKEY_REFERRAL_URL}`;
      }

      const { userData: currentData, currentAddress, isAddressUpdated } = freshData;
      const zkProofStatus = currentData.zkProof ? "‚úÖ Verified" : "‚ö†Ô∏è Pending";
      const setupStatus = currentAddress ? "‚úÖ Complete" : "‚è≥ Pending";
      
      const addressUpdateNotice = isAddressUpdated 
        ? `\nüîÑ **Address Updated**: Your stealth address was refreshed.`
        : '';

      return `üîç **Your fkey.id Status**

**Username**: ${currentData.fkeyId}.fkey.id  
**Setup**: ${setupStatus}
**ZK Proof**: ${zkProofStatus}
**Address**: ${currentAddress ? `${currentAddress.slice(0, 8)}...${currentAddress.slice(-6)}` : 'Pending'}${addressUpdateNotice}

**üöÄ Quick Actions:**
‚Ä¢ **Create payment link**: "create payment link for $25"
‚Ä¢ **Check balance**: \`/balance\`
‚Ä¢ **Manage links**: \`/links\`
‚Ä¢ **Help**: \`/help\`

${setupStatus === "‚è≥ Pending" ? `**Complete Setup**: ${this.DSTEALTH_APP_URL}` : ""}`;

    } catch (error) {
      console.error("Error handling fkey status query:", error);
      return `‚ùå **Error Checking fkey Status**

Something went wrong. Please try:
‚Ä¢ \`/set yourUsername\` to reset
‚Ä¢ \`/help\` for all commands
‚Ä¢ Contact support if issues persist`;
    }
  }

  /**
   * üîß NEW: Process general messages with intelligent responses
   */
  private async processGeneralMessage(content: string, senderInboxId: string, isGroup: boolean): Promise<string> {
    try {
      // Get user data for context
      const userData = await agentDb.getStealthDataByUser(senderInboxId);
      
      // Check for command patterns
      if (content.startsWith('/')) {
        return await this.handleCommand(content, senderInboxId, isGroup);
      }
      
      // Check for basic keywords
      const basicResponse = this.handleBasicKeywords(content);
      if (basicResponse) {
        return basicResponse;
      }
      
      // Try OpenAI integration for intelligent responses
      if (this.OPENAI_API_KEY) {
        const openAIResponse = await this.handleWithOpenAI(content, senderInboxId, isGroup);
        if (openAIResponse) {
          return openAIResponse;
        }
      }
      
      // üîß NEW: Group intro message if not sent yet
      if (isGroup && !this.groupIntroductions.has(senderInboxId)) {
        this.groupIntroductions.add(senderInboxId);
        return this.getGroupIntroMessage();
      }
      
      // Fallback to basic response
      return this.getBasicResponse(content, userData);
    } catch (error) {
      console.error("Error processing general message:", error);
      return `‚ùå **Error Processing Message**

Something went wrong. Please try:
‚Ä¢ \`/help\` for all commands
‚Ä¢ Contact support if issues persist`;
    }
  }

  /**
   * üîß NEW: Handle fkey.id setting commands
   */
  private async handleFkeySetCommand(
    content: string,
    senderInboxId: string,
    isGroup: boolean,
  ): Promise<string> {
    try {
      let username = '';
      const trimmed = content.trim();
      
      // Extract username from different command formats
      if (trimmed.toLowerCase().startsWith('/set ')) {
        username = trimmed.slice(5).trim();
      } else if (trimmed.toLowerCase().startsWith('my fkey is ')) {
        username = trimmed.slice(11).trim();
      } else if (trimmed.toLowerCase().startsWith('my fkey.id is ')) {
        username = trimmed.slice(14).trim();
      }

      // Remove .fkey.id suffix if present
      if (username.toLowerCase().endsWith('.fkey.id')) {
        username = username.slice(0, -8);
      }

      username = username.toLowerCase().trim();

      if (!username || username.length < 2) {
        return `‚ùå **Invalid Username**

Please provide a valid fkey.id username.

**Examples:**
‚Ä¢ \`/set tantodefi\`
‚Ä¢ \`/set tantodefi.fkey.id\`
‚Ä¢ \`my fkey is tantodefi\`

**Need FluidKey?** Get it here: ${this.FLUIDKEY_REFERRAL_URL}`;
      }

      // üîß ONLY NOW: Call fkey.id lookup API
      console.log(`üîç Setting fkey.id for user: ${username}`);
      const lookupResult = await this.callFkeyLookupAPI(username);

      if (lookupResult.error) {
        return `‚ùå **fkey.id Setup Failed**

Could not verify \`${username}.fkey.id\`: ${lookupResult.error}

**Please ensure:**
1. üîë You have FluidKey: ${this.FLUIDKEY_REFERRAL_URL}
2. üìù Your username is correct (e.g., "tantodefi")
3. üåê Your fkey.id profile is publicly accessible

Try: \`/set yourUsername\``;
      }

      // Store fkey.id association with ZK proof
      const userData = {
        userId: senderInboxId,
        fkeyId: username,
        stealthAddress: lookupResult.address || "",
        zkProof: lookupResult.proof,
        lastUpdated: Date.now(),
        requestedBy: senderInboxId,
      };

      await agentDb.storeUserStealthData(userData);

      const proofStatus = lookupResult.proof ? "‚úÖ ZK Proof Verified" : "‚ö†Ô∏è No ZK Proof Available";

      return `‚úÖ **fkey.id Set Successfully!** 

**Your Profile**: \`${username}.fkey.id\`
**Address**: \`${lookupResult.address?.slice(0, 6)}...${lookupResult.address?.slice(-4)}\`
**Status**: ${proofStatus}

**Now you can:**
‚Ä¢ üí≥ Create payment links: "create payment link for $25"
‚Ä¢ üîç Check balance: \`/balance\`
‚Ä¢ üìä View links: \`/links\`

**Complete Setup**: ${this.DSTEALTH_APP_URL}`;

    } catch (error) {
      console.error("Error setting fkey.id:", error);
      return `‚ùå Failed to set fkey.id. Please try again or contact support.`;
    }
  }

  /**
   * üîß NEW: Process messages with OpenAI for intelligent responses
   */
  private async handleWithOpenAI(
    content: string,
    senderInboxId: string,
    isGroup: boolean,
  ): Promise<string | undefined> {
    try {
      // Check if user has fkey.id set
          const userData = await agentDb.getStealthDataByUser(senderInboxId);
      
      if (!userData?.fkeyId) {
        // User hasn't set fkey.id
        if (isGroup) {
          // In groups, don't respond to users without fkey.id unless specifically mentioned
          return undefined;
          } else {
          // In DMs, ask them to set fkey.id
          return `üëã **Welcome to dStealth!** ü•∑

To use the dStealth agent, please first set your fkey.id:

**Step 1**: üîë **Get FluidKey** (if you don't have it)
${this.FLUIDKEY_REFERRAL_URL}

**Step 2**: üìù **Set your fkey.id**
‚Ä¢ \`/set yourUsername\`
‚Ä¢ \`my fkey is yourUsername\`

**Step 3**: üöÄ **Complete setup**
${this.DSTEALTH_APP_URL}

**Need help?** Type \`/help\` for commands!`;
        }
      }

      // üîß NEW: Use OpenAI if available
      if (this.OPENAI_API_KEY) {
        return await this.getOpenAIResponse(content, userData);
      } else {
        // Fallback to basic responses
        return this.getBasicResponse(content, userData);
      }

    } catch (error) {
      console.error("Error in OpenAI processing:", error);
      return undefined;
    }
  }

  /**
   * üîß NEW: Get OpenAI response
   */
  private async getOpenAIResponse(content: string, userData: any): Promise<string> {
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: `You are dStealth, a privacy-focused AI agent that helps users with anonymous payments and stealth addresses. The user has fkey.id: ${userData.fkeyId}. Keep responses concise, helpful, and privacy-focused. You can help with payment links, privacy tools, and general questions about cryptocurrency privacy.`
            },
            {
              role: 'user',
              content: content
            }
          ],
          max_tokens: 150,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data = await response.json() as { 
        choices: Array<{ 
          message: { 
            content: string; 
          }; 
        }> 
      };
      return data.choices[0]?.message?.content || "I'm here to help with privacy and payments! Type /help for commands.";

    } catch (error) {
      console.error("OpenAI API error:", error);
      return "I'm here to help with privacy and payments! Type /help for commands.";
    }
  }

  /**
   * üîß NEW: Basic fallback response
   */
  private getBasicResponse(content: string, userData: any): string {
    const lower = content.toLowerCase();
    
    if (lower.includes('hello') || lower.includes('hi') || lower.includes('hey')) {
      return `üëã Hello ${userData.fkeyId}! I'm dStealth, your privacy assistant. How can I help you today?`;
    }
    
    if (lower.includes('help')) {
      return this.getHelpMessage();
    }
    
    return `Hi ${userData.fkeyId}! I'm here to help with anonymous payments and privacy tools. Type \`/help\` for available commands.`;
  }

  /**
   * üîß NEW: Group introduction message
   */
  private getGroupIntroMessage(): string {
    return `üëã **Hello! I'm dStealth** ü•∑

I help with **anonymous payments** and **privacy tools**.

**To get started:**
‚Ä¢ DM me to set your fkey.id: \`/set yourUsername\`
‚Ä¢ Create payment links: "create payment link for $25" 
‚Ä¢ Get help: \`/help\`

I only respond when @mentioned or for payment requests!`;
  }

  /**
   * üîß UPDATED: Handle commands with enhanced help and fkey.id requirements
   */
  private async handleCommand(
    command: string,
    senderInboxId: string,
    isGroup: boolean,
  ): Promise<string> {
    const cmd = command.toLowerCase().trim();

    // /help command - always available - send action buttons
    if (cmd === "/help") {
        await this.sendHelpActionsMessage(senderInboxId);
        return ""; // Return empty string since we're sending actions
    }

    // /actions command - send action buttons
    if (cmd === "/actions") {
        await this.sendActionsMenu(senderInboxId);
        return ""; // Return empty string since we're sending actions
    }

    // Check if user has fkey.id set for other commands
    const userData = await agentDb.getStealthDataByUser(senderInboxId);
    if (!userData?.fkeyId && cmd !== "/help") {
      if (isGroup) {
        return "üîí Please DM me to set your fkey.id first: `/set yourUsername`";
      } else {
        return `üîí **Please set your fkey.id first**

**Set your fkey.id:**
‚Ä¢ \`/set yourUsername\`
‚Ä¢ \`my fkey is yourUsername\`

**Need FluidKey?** ${this.FLUIDKEY_REFERRAL_URL}`;
      }
    }

    switch (cmd) {
      case "/status":
        return this.getStatusMessage();

      case "/balance":
        return await this.handleBalanceCheck(senderInboxId);

      case "/links":
        return await this.handleLinksManagement(senderInboxId);

      default:
        if (cmd.startsWith("/set ")) {
          // Handle via fkey set command
          return await this.handleFkeySetCommand(command, senderInboxId, isGroup);
        }
        if (cmd.startsWith("/fkey ")) {
          const fkeyId = cmd.slice(6).trim();
          return await this.handleFkeyLookup(fkeyId, senderInboxId);
        }
        return `‚ùå Unknown command. Type \`/help\` for available commands.`;
    }
  }

  /**
   * Extract payment amount from message content
   */
  private extractPaymentAmount(content: string): string | null {
    const patterns = [
      /create.*payment.*link.*for.*\$(\d+(?:\.\d{2})?)/i,
      /\$(\d+(?:\.\d{2})?).*payment.*link/i,
      /generate.*link.*\$(\d+(?:\.\d{2})?)/i,
      /payment.*link.*\$(\d+(?:\.\d{2})?)/i,
      /\$(\d+(?:\.\d{2})?)/,
    ];

    for (const pattern of patterns) {
      const match = content.match(pattern);
      if (match && match[1]) {
        return match[1];
      }
    }
    return null;
  }

  /**
   * üîß FIXED: Check if message is a fkey.id pattern - ONLY match actual .fkey.id domains
   */
  private isFkeyIdPattern(content: string): boolean {
    const patterns = [/^[a-zA-Z0-9_-]+\.fkey\.id$/i];

    const trimmed = content.trim();
    return (
      patterns.some((pattern) => pattern.test(trimmed)) && trimmed.length >= 2
    );
  }

  /**
   * üîß FIXED: Call fkey.id lookup API to get ZK proof and store it
   */
  private async callFkeyLookupAPI(fkeyId: string): Promise<{ address?: string; proof?: unknown; error?: string }> {
    try {
      const baseUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      const response = await fetch(`${baseUrl}/api/fkey/lookup/${fkeyId}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json() as { isRegistered?: boolean; address?: string; proof?: unknown; error?: string };
      
      if (data.isRegistered && data.address) {
        return {
          address: data.address,
          proof: data.proof || null
        };
      } else {
        return {
          error: data.error || 'fkey.id not found or not registered'
        };
      }
      
    } catch (error) {
      console.error('‚ùå Error calling fkey.id lookup API:', error);
      return {
        error: error instanceof Error ? error.message : 'Failed to lookup fkey.id'
      };
    }
  }

  /**
   * üîß SECURITY: Helper method to always get fresh user stealth data with current fkey.id lookup
   */
  private async getFreshUserStealthData(senderInboxId: string): Promise<{
    userData: any;
    currentAddress: string;
    isAddressUpdated: boolean;
    error?: string;
  } | null> {
    try {
      const userData = await agentDb.getStealthDataByUser(senderInboxId);
      
      if (!userData || !userData.fkeyId) {
        return null;
      }

      // Always do fresh fkey.id lookup for security
      console.log(`üîí Security check: Refreshing stealth address for ${userData.fkeyId}`);
      const freshLookup = await this.callFkeyLookupAPI(userData.fkeyId);
      
      if (freshLookup.error || !freshLookup.address) {
        return {
          userData,
          currentAddress: '',
          isAddressUpdated: false,
          error: freshLookup.error || 'No address found'
        };
      }

      const currentAddress = freshLookup.address;
      let isAddressUpdated = false;

      // Update stored data if address changed or missing
      if (!userData.stealthAddress || userData.stealthAddress !== currentAddress) {
        if (userData.stealthAddress) {
          console.log(`üîÑ Address updated for ${userData.fkeyId}: ${userData.stealthAddress} ‚Üí ${currentAddress}`);
          isAddressUpdated = true;
        }
        
        // Update stored data with fresh info
        const updatedUserData = {
          ...userData,
          stealthAddress: currentAddress,
          zkProof: freshLookup.proof,
          lastUpdated: Date.now(),
        };
        await agentDb.storeUserStealthData(updatedUserData);
        
        return {
          userData: updatedUserData,
          currentAddress,
          isAddressUpdated
        };
      }

      return {
        userData,
        currentAddress,
        isAddressUpdated: false
      };
    } catch (error) {
      console.error('Error in getFreshUserStealthData:', error);
      return null;
    }
  }

  /**
   * Generate Coinbase Wallet payment request URL
   */
  private generateCoinbaseWalletLink(toAddress: string, amount: string, tokenSymbol: string = 'USDC'): string {
    try {
      // USDC contract address on Base
      const usdcContractBase = '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913';
      
      // Convert amount to smallest unit (USDC has 6 decimals)
      const amountInSmallestUnit = Math.floor(parseFloat(amount) * 1000000).toString();
      
      // Construct EIP-681 URI for Base network
      const eip681Uri = `ethereum:${usdcContractBase}@8453/transfer?address=${toAddress}&uint256=${amountInSmallestUnit}`;
      
      // URL encode the EIP-681 URI
      const encodedUri = encodeURIComponent(eip681Uri);
      
      // Construct Coinbase Wallet request URL
      const coinbaseWalletUrl = `https://go.cb-w.com/pay-request?EIP681Link=${encodedUri}`;
      
      return coinbaseWalletUrl;
    } catch (error) {
      console.error('Error generating Coinbase Wallet link:', error);
      return '';
    }
  }

  /**
   * üîß UPDATED: Handle payment requests with fkey.id requirement
   */
  private async handlePaymentRequest(
    amount: string,
    senderInboxId: string,
    conversationId: string,
    isGroup: boolean,
  ): Promise<string> {
    try {
      // Check if user has fkey.id set
      const userData = await agentDb.getStealthDataByUser(senderInboxId);
      
      if (!userData?.fkeyId) {
        if (isGroup) {
          return "üîí Please DM me to set your fkey.id first: `/set yourUsername`";
        } else {
        return `üîí **Payment Link Setup Required**

To create payment links, please set your fkey.id first:

**Step 1**: \`/set yourUsername\`
**Step 2**: Complete setup at ${this.DSTEALTH_APP_URL}

**Need FluidKey?** ${this.FLUIDKEY_REFERRAL_URL}`;
        }
      }

      // üîß SECURITY: Get fresh user data with current address verification
      const freshData = await this.getFreshUserStealthData(senderInboxId);

      if (!freshData) {
        return `‚ùå **Setup Incomplete**

Please complete your setup at ${this.DSTEALTH_APP_URL}`;
      }

      if (freshData.error) {
        return `‚ùå **Security Error**

Could not verify your fkey.id: ${freshData.error}

Please re-verify: \`/set ${userData.fkeyId}\``;
      }

      const { userData: currentData, currentAddress, isAddressUpdated } = freshData;
      
      // Generate proper Daimo payment link
      const amountInDollars = parseFloat(amount);
      
      // üîß VALIDATION: Check Daimo API limits (max $4000)
      if (amountInDollars > 4000) {
        return `‚ùå **Payment Amount Too Large**

**Requested**: $${amount}
**Daimo Limit**: $4000.00 maximum

**Please try a smaller amount:**
‚Ä¢ "create payment link for $100"
‚Ä¢ "create payment link for $500"
‚Ä¢ "create payment link for $1000"

**Why the limit?** Daimo has security limits for payment links.
**Need larger amounts?** Visit ${this.DSTEALTH_APP_URL} for alternatives.`;
      }
      
      // Format as decimal string (e.g., "50.00") as required by Daimo API docs
      const amountDecimalString = amountInDollars.toFixed(2);
      
      const paymentRequest = {
        destinationAddress: currentAddress,
        amountUnits: amountDecimalString, // Decimal string format per Daimo API docs
        displayAmount: amount,
        tokenSymbol: "USDC",
        chainId: "8453", // Base
        intent: `ZK Stealth Payment to ${currentData.fkeyId}.fkey.id - view ZK receipt at dstealth.xyz`,
        metadata: {
          fkeyId: currentData.fkeyId,
          stealthAddress: currentAddress,
          zkProof: currentData.zkProof ? "available" : "pending",
          source: "dstealth-agent"
        }
      };

      const daimoResponse = await daimoPayClient.createPaymentLink(paymentRequest);
      
      // Generate Coinbase Wallet payment URL
      const coinbaseWalletUrl = this.generateCoinbaseWalletLink(currentAddress, amount, "USDC");

      const addressChangeWarning = isAddressUpdated 
        ? `\n‚ö†Ô∏è **Address Updated**: Your stealth address was refreshed.`
        : '';

      // Send main Daimo response
      const daimoMessage = `üí≥ Payment Link Created! ü•∑

Amount: $${amount} USDC
Recipient: ${currentData.fkeyId}.fkey.id
Address: ${currentAddress.slice(0, 6)}...${currentAddress.slice(-4)}${addressChangeWarning}

üîó Daimo Payment Link: ${daimoResponse.url}

Features:
‚Ä¢ ü•∑ Anonymous sender privacy
‚Ä¢ ‚ö° Direct to stealth address via Daimo
‚Ä¢ üéØ Earn privacy rewards
‚Ä¢ üßæ ZK proof receipt

Share this link to receive payments!`;

      // üîß FIXED: Send Transaction Actions for the payment link - now uses senderInboxId
      await this.sendTransactionActions(senderInboxId, amount, currentData.fkeyId, daimoResponse.url, currentAddress);

      return daimoMessage;

    } catch (error) {
      console.error("Error creating payment link:", error);
      return `‚ùå Failed to create payment link. Please try again.`;
    }
  }

  /**
   * üîß FIXED: Handle fkey.id submissions - Core Feature #2 - Now calls API and stores ZK proof
   */
  private async handleFkeyIdSubmission(
    fkeyInput: string,
    senderInboxId: string,
  ): Promise<string> {
    try {
      const fkeyId = fkeyInput.replace(".fkey.id", "").toLowerCase().trim();

      if (!fkeyId || fkeyId.length < 2) {
        return 'Please provide a valid fkey.id username (e.g., "tantodefi" or "tantodefi.fkey.id")';
      }

      // üîß FIXED: Call fkey.id lookup API to get ZK proof
      console.log(`üîç Looking up fkey.id: ${fkeyId}`);
      const lookupResult = await this.callFkeyLookupAPI(fkeyId);

      if (lookupResult.error) {
        return `‚ùå **fkey.id Lookup Failed**

Could not verify ${fkeyId}.fkey.id: ${lookupResult.error}

**Please ensure:**
1. üîë You have a FluidKey account: ${this.FLUIDKEY_REFERRAL_URL}
2. üìù Your username is correct (e.g., "tantodefi.fkey.id")
3. üåê Your fkey.id profile is publicly accessible

Try again with the correct username, or get FluidKey first!`;
      }

      // Store fkey.id association with ZK proof
      const userData = {
        userId: senderInboxId,
        fkeyId,
        stealthAddress: lookupResult.address || "", // Store the verified address
        zkProof: lookupResult.proof, // üîß FIXED: Store the actual ZK proof
        lastUpdated: Date.now(),
        requestedBy: senderInboxId,
      };

      await agentDb.storeUserStealthData(userData);

      const proofStatus = lookupResult.proof
        ? "‚úÖ ZK Proof Verified"
        : "‚ö†Ô∏è No ZK Proof Available";

      return `‚úÖ **fkey.id Connected!** 

**Your Profile**: ${fkeyId}.fkey.id
**Address**: ${lookupResult.address?.slice(0, 6)}...${lookupResult.address?.slice(-4)}
**ZK Proof**: ${proofStatus}

**üöÄ Next Steps:**
1. **Complete Setup**: ${this.DSTEALTH_APP_URL}
2. **Generate Stealth Address** 
3. **Create Payment Links**: "create payment link for $X"

**üí° Your ZK proof enables:**
‚Ä¢ Generate anonymous payment links
‚Ä¢ Receive cryptographic receipts for transactions
‚Ä¢ Earn privacy rewards
‚Ä¢ Access advanced stealth features

**Ready to finish setup?** Visit ${this.DSTEALTH_APP_URL} now!`;
    } catch (error) {
      console.error("Error handling fkey.id submission:", error);
      return "‚ùå Failed to save fkey.id. Please try again.";
    }
  }

  /**
   * Handle basic keywords and greetings
   */
  private handleBasicKeywords(content: string): string | null {
    const lower = content.toLowerCase();

    if (
      lower.includes("hello") ||
      lower.includes("hi") ||
      lower.includes("hey")
    ) {
      return `üëã **Hello! I'm the dStealth Agent** ü•∑

I help you create **anonymous payment links** and earn **privacy rewards**!

**üöÄ Get Started:**
1. üîë **Get FluidKey**: ${this.FLUIDKEY_REFERRAL_URL}
2. üìù **Tell me your fkey.id**: (e.g., "tantodefi.fkey.id")
3. üöÄ **Complete setup**: ${this.DSTEALTH_APP_URL}
4. üí≥ **Create links**: "create payment link for $X"

**Commands**: /help, /status, /balance
**Questions?** Just ask me anything about stealth payments!`;
    }

    if (lower.includes("help")) {
      return this.getHelpMessage();
    }

    return null;
  }

  /**
   * Handle user welcome - Core Feature #1 (FluidKey signup)
   * üîß SECURITY: Also refreshes stealth address for consistency
   */
  private async handleUserWelcome(senderInboxId: string): Promise<string> {
    try {
      // üîß SECURITY: Get fresh user data for consistent experience
      const freshData = await this.getFreshUserStealthData(senderInboxId);

      if (freshData?.userData?.fkeyId) {
        const { userData, currentAddress, isAddressUpdated } = freshData;
        const setupStatus = currentAddress ? "complete" : "pending";
        const zkProofStatus = userData.zkProof ? "‚úÖ Verified" : "‚ö†Ô∏è Pending";

        const addressUpdateWarning = isAddressUpdated 
          ? `\nüîÑ **Address Updated**: Your stealth address was refreshed from fkey.id.`
          : '';

        return `üëã **Welcome back, ${userData.fkeyId}!** ü•∑

**Setup Status**: ${setupStatus === "complete" ? "‚úÖ Complete" : "‚è≥ Pending"}
**ZK Proof**: ${zkProofStatus}${addressUpdateWarning}

**Quick Actions:**
‚Ä¢ **"create payment link for $X"** - Generate payment links
‚Ä¢ **"/balance"** - Check your earnings
‚Ä¢ **"/links"** - Manage your links

${setupStatus === "pending" ? `**Complete Setup**: ${this.DSTEALTH_APP_URL}` : ""}

**Need help?** Type "/help" for all commands!`;
      }

      // New user - Core Feature #1: FluidKey signup promotion
      return `üëã **Welcome to dStealth!** ü•∑

I'm your **privacy assistant** for anonymous payments & rewards.

**üöÄ Get Started (2 minutes):**

**Step 1**: üîë **Get FluidKey** (free privacy wallet)
${this.FLUIDKEY_REFERRAL_URL}

**Step 2**: üìù **Tell me your fkey.id** 
Example: "tantodefi.fkey.id"

**Step 3**: üöÄ **Complete setup**
${this.DSTEALTH_APP_URL}

**üí∞ What you'll get:**
‚Ä¢ ü•∑ **Anonymous payment links**
‚Ä¢ üßæ **ZK receipts** for transactions  
‚Ä¢ üéØ **Privacy rewards** & points
‚Ä¢ üîí **Stealth addresses** for privacy

**Try saying**: "tantodefi.fkey.id" or "/help"

*Start earning privacy rewards today!*`;
    } catch (error) {
      console.error("Error in user welcome:", error);
      return `üëã **Welcome to dStealth!** ü•∑

Get started with FluidKey: ${this.FLUIDKEY_REFERRAL_URL}
Then tell me your fkey.id username!`;
    }
  }

  /**
   * üîß UPDATED: Enhanced help message with new commands - No markdown formatting
   */
  private getHelpMessage(): string {
    return `ü§ñ dStealth Agent Commands ü•∑

üîß Setup Commands:
‚Ä¢ /set yourUsername - Set your fkey.id (required)
‚Ä¢ my fkey is yourUsername - Alternative way to set fkey.id

üí≥ Payment Commands:
‚Ä¢ create payment link for $25 - Generate anonymous payment link
‚Ä¢ /balance - Check your earnings
‚Ä¢ /links - Manage your payment links

‚ÑπÔ∏è Info Commands:
‚Ä¢ /help - Show this help
‚Ä¢ /status - Check agent status
‚Ä¢ /fkey username - Look up someone's fkey.id

üìã Group Chat Behavior:
‚Ä¢ I only respond to @mentions or payment requests
‚Ä¢ DM me to set up your fkey.id privately
‚Ä¢ Use @dstealth, @dstealth.eth, or @dstealth.base.eth

üöÄ Quick Start:
1. Get FluidKey: ${this.FLUIDKEY_REFERRAL_URL}
2. Set fkey.id: /set yourUsername  
3. Complete setup: ${this.DSTEALTH_APP_URL}
4. Create payment links!

Need help? Just ask me anything about privacy payments!`;
  }

  /**
   * Get agent status message
   */
  private getStatusMessage(): string {
    if (!this.client) {
      return "‚ùå Agent not available";
    }

    const status = this.getStatus();

    return `üìä **Agent Status**

**Status**: ${status.isRunning ? "üü¢ Active" : "üî¥ Inactive"}
**Messages Processed**: ${status.processedMessageCount}
**Stream Restarts**: ${status.streamRestartCount}
**Installations**: ${status.installationCount}/5

**Core Features**: ‚úÖ All operational
‚Ä¢ FluidKey referral system
‚Ä¢ fkey.id profile management with ZK proofs
‚Ä¢ Payment link generation
‚Ä¢ ZK receipt creation

**XMTP SDK**: v3.1.0+ with enhanced reliability
**Agent Address**: ${status.agentAddress}

Agent is running optimally! üöÄ`;
  }

  /**
   * Handle balance check
   */
  private async handleBalanceCheck(senderInboxId: string): Promise<string> {
    try {
      const userData = await agentDb.getStealthDataByUser(senderInboxId);

      if (!userData || !userData.fkeyId) {
        return `üí∞ **Balance Check - Setup Required**

To check your balance, complete your setup:

1. üîë **Get FluidKey**: ${this.FLUIDKEY_REFERRAL_URL}
2. üìù **Tell me your fkey.id**: (e.g., "tantodefi.fkey.id")
3. üöÄ **Complete setup**: ${this.DSTEALTH_APP_URL}

Once setup is complete, I can show your privacy rewards balance!`;
      }

      return `üí∞ **Balance Overview** 

**Profile**: ${userData.fkeyId}.fkey.id
**Privacy Points**: Coming soon...
**Rewards**: Coming soon...

**üí° Earn More:**
‚Ä¢ Generate payment links
‚Ä¢ Receive stealth payments
‚Ä¢ Complete privacy challenges

**Full Dashboard**: ${this.DSTEALTH_APP_URL}`;
    } catch (error) {
      console.error("Error checking balance:", error);
      return "‚ùå Failed to check balance. Please try again.";
    }
  }

  /**
   * Handle links management
   */
  private async handleLinksManagement(senderInboxId: string): Promise<string> {
    try {
      // üîß SECURITY: Refresh stealth address for links management as well
      const freshData = await this.getFreshUserStealthData(senderInboxId);

      if (!freshData) {
        return `üîó **Links Management - Setup Required**

To manage your payment links:

1. üîë **Get FluidKey**: ${this.FLUIDKEY_REFERRAL_URL}
2. üìù **Tell me your fkey.id**: (e.g., "tantodefi.fkey.id")
3. üöÄ **Complete setup**: ${this.DSTEALTH_APP_URL}

Then you can create and manage payment links!`;
      }

      if (freshData.error) {
        return `‚ùå **Links Management Error: fkey.id Verification Failed**

Could not verify your current fkey.id address: ${freshData.error}

**This could mean:**
‚Ä¢ Your fkey.id profile is no longer accessible
‚Ä¢ Your FluidKey account has issues
‚Ä¢ Network connectivity problems

**Please re-verify your fkey.id**: "${freshData.userData.fkeyId}.fkey.id"
**Or get support**: ${this.FLUIDKEY_REFERRAL_URL}`;
      }

      const { userData, currentAddress, isAddressUpdated } = freshData;

      return `üîó **Payment Links Management**

**Profile**: ${userData.fkeyId}.fkey.id
**Active Links**: View in dashboard
**Analytics**: View in dashboard

**üöÄ Quick Actions:**
‚Ä¢ **"create payment link for $X"** - Generate new link
‚Ä¢ **Full Dashboard**: ${this.DSTEALTH_APP_URL}

**üí° Pro Tip**: Share your payment links to earn privacy rewards!`;
    } catch (error) {
      console.error("Error managing links:", error);
      return "‚ùå Failed to manage links. Please try again.";
    }
  }

  /**
   * üîß FIXED: Handle fkey lookup - Now actually calls the API and returns real data
   */
  private async handleFkeyLookup(
    fkeyId: string,
    senderInboxId: string,
  ): Promise<string> {
    const cleanFkeyId = fkeyId.replace(".fkey.id", "").toLowerCase().trim();

    try {
      console.log(`üîç Looking up fkey.id: ${cleanFkeyId} for ${senderInboxId}`);

      // Call the actual fkey.id lookup API
      const lookupResult = await this.callFkeyLookupAPI(cleanFkeyId);

      if (lookupResult.error) {
        return `‚ùå **fkey.id Lookup Failed**

Could not find ${cleanFkeyId}.fkey.id: ${lookupResult.error}

**Common Issues:**
‚Ä¢ Username might be incorrect
‚Ä¢ Profile might be private
‚Ä¢ FluidKey account might not exist

**üîó Get FluidKey**: ${this.FLUIDKEY_REFERRAL_URL}
**üí° Want your own fkey.id?** Get FluidKey first!`;
      }

      const hasZkProof = lookupResult.proof
        ? "‚úÖ ZK Proof Available"
        : "‚ö†Ô∏è No ZK Proof";
      const address = lookupResult.address || "Unknown";

      return `üîç **fkey.id Lookup Result**

**Profile**: ${cleanFkeyId}.fkey.id
**Address**: ${address.slice(0, 6)}...${address.slice(-4)}
**ZK Proof**: ${hasZkProof}
**Status**: ‚úÖ Verified

**üöÄ Profile Features**:
‚Ä¢ Anonymous payment links
‚Ä¢ Cryptographic identity verification
‚Ä¢ Privacy-preserving transactions

**Want to connect this profile?** Just say "${cleanFkeyId}.fkey.id"
**Get your own FluidKey**: ${this.FLUIDKEY_REFERRAL_URL}`;
    } catch (error) {
      console.error("Error in fkey lookup:", error);
      return `‚ùå **Lookup Error**

Failed to lookup ${cleanFkeyId}.fkey.id. Please try again.

**Get FluidKey**: ${this.FLUIDKEY_REFERRAL_URL}`;
    }
  }

  /**
   * üîß NEW: Handle Intent messages from action buttons
   */
  private async handleIntentMessage(
    intent: IntentContent,
    senderInboxId: string,
  ): Promise<string> {
    try {
      const actionId = intent.actionId;
      const metadata = intent.metadata;

      console.log(`üéØ Handling Intent Action: ${actionId}`);

      // Create unique intent message ID for deduplication
      const intentMessageId = `${senderInboxId}-${intent.id}-${actionId}`;
      
      // DEDUPLICATION: Check if we've already processed this intent
      if (this.processedIntentIds.has(intentMessageId)) {
        console.log(`üîÑ DUPLICATE Intent detected - skipping: ${intentMessageId}`);
        console.log(`   Already processed intents: ${this.processedIntentIds.size}`);
        return ""; // Return empty string to avoid duplicate responses
      }
      
      // Mark this intent as processed
      this.processedIntentIds.add(intentMessageId);
      console.log(`‚úÖ Intent marked as processed: ${intentMessageId}`);
      console.log(`   Total processed intents: ${this.processedIntentIds.size}`);
      
      // Clean up old intent IDs to prevent memory leaks (keep last 100)
      if (this.processedIntentIds.size > 100) {
        const oldIntents = Array.from(this.processedIntentIds).slice(0, 50);
        oldIntents.forEach(id => this.processedIntentIds.delete(id));
        console.log(`üßπ Cleaned up ${oldIntents.length} old intent IDs`);
      }

      // Extract action set ID from intent.id (e.g., "help-actions-1752163068713-wdn9zl")
      const actionSetId = intent.id;
      console.log(`üîç Action Set ID: ${actionSetId}`);

      // Check if this is from the latest action set for this user
      const latestActionSetId = this.userLatestActionSetId.get(senderInboxId);
      console.log(`üîç Action Set Validation for user ${senderInboxId}:`);
      console.log(`   Current Intent Action Set: ${actionSetId}`);
      console.log(`   Latest Stored Action Set: ${latestActionSetId || 'none'}`);
      console.log(`   Total Tracked Users: ${this.userLatestActionSetId.size}`);
      
      if (latestActionSetId && latestActionSetId !== actionSetId) {
        console.log(`‚ö†Ô∏è  REJECTING outdated action set: ${actionSetId}, latest: ${latestActionSetId}`);
        return `‚ö†Ô∏è Outdated Action Button

The action button you clicked is from an older menu. Please use the latest action buttons.

Clicked Action Set: ${actionSetId}
Latest Action Set: ${latestActionSetId}

To get the latest actions:
Type /help for a fresh set of action buttons.

Why this happens:
‚Ä¢ New action buttons were sent after the one you clicked
‚Ä¢ Only the most recent action buttons are valid
‚Ä¢ This prevents accidentally clicking old buttons

Try again: Type /help now!`;
      } else {
        console.log(`‚úÖ Action set validation passed - processing action`);
      }

      // Extract base action ID from complex format: "action-name-timestamp-random"
      // Examples: 
      // - "get-help-1752163068713-wdn9zl" -> "get-help"
      // - "create-payment-link-1752163068713-wdn9zl" -> "create-payment-link"
      // - "test-simple-1752163068713-wdn9zl" -> "test-simple"
      
      let baseActionId = actionId;
      
      // Remove timestamp-random suffix pattern (e.g., "-1752163068713-wdn9zl")
      const timestampPattern = /-\d{13}-[a-z0-9]{6}$/;
      if (timestampPattern.test(actionId)) {
        baseActionId = actionId.replace(timestampPattern, '');
      }
      
      console.log(`üéØ Base Action ID extracted: "${baseActionId}" from "${actionId}"`);
      
      switch (baseActionId) {
        case 'test-simple':
          return `üß™ Test Button Clicked Successfully!

‚úÖ Intent Message Working! 

The action button successfully triggered an Intent message with:
‚Ä¢ Action ID: ${actionId}
‚Ä¢ Base Action: ${baseActionId}
‚Ä¢ Intent ID: ${intent.id}
‚Ä¢ Sender: ${senderInboxId}

This confirms that:
1. ‚úÖ Action buttons are rendering correctly
2. ‚úÖ Intent messages are being sent by Coinbase Wallet
3. ‚úÖ Intent content type detection is working
4. ‚úÖ Intent message processing is functional
5. ‚úÖ Base action ID extraction is working

üéâ The action button system is working! 

Next steps:
‚Ä¢ All other action buttons should now work
‚Ä¢ Try clicking "üí∞ Check balance" or other buttons
‚Ä¢ Type /help to see all available actions

Complete Setup: ${this.DSTEALTH_APP_URL}`;

        case 'check-balance':
          return await this.handleBalanceCheck(senderInboxId);

        case 'create-payment-link':
          return `üí≥ Create Payment Link

To create a payment link, specify the amount:

Examples:
‚Ä¢ "create payment link for $25"
‚Ä¢ "create payment link for $100"
‚Ä¢ "create payment link for $500"

Setup Required:
üîë Get FluidKey: ${this.FLUIDKEY_REFERRAL_URL}
üìù Set fkey.id: /set yourUsername
üöÄ Complete setup: ${this.DSTEALTH_APP_URL}

Try saying: "create payment link for $25"`;

        case 'get-help':
          return this.getHelpMessage();

        case 'setup-fkey':
          return `üîë Setup fkey.id

To set up your fkey.id:

Step 1: üîë Get FluidKey (if you don't have it)
${this.FLUIDKEY_REFERRAL_URL}

Step 2: üìù Set your fkey.id
‚Ä¢ /set yourUsername
‚Ä¢ my fkey is yourUsername

Step 3: üöÄ Complete setup
${this.DSTEALTH_APP_URL}

Examples:
‚Ä¢ /set tantodefi
‚Ä¢ my fkey is tantodefi

Need help? Just ask me anything!`;

        case 'manage-links':
          return await this.handleLinksManagement(senderInboxId);

        case 'check-status':
          return this.getStatusMessage();

        case 'open-coinbase-wallet':
          return `üîó Open in Coinbase Wallet

Your payment link is ready! Use the Coinbase Wallet app to:

‚Ä¢ üì± Open Coinbase Wallet
‚Ä¢ üí≥ Navigate to payment links
‚Ä¢ üöÄ Complete your payment

Direct Link: Use the Daimo link from the previous message

Need help? Contact support at ${this.DSTEALTH_APP_URL}`;

        case 'share-link':
          return `üì§ Share Your Payment Link

Copy the Daimo link from the previous message and share it with:

‚Ä¢ üì± Social media
‚Ä¢ üí¨ Direct messages
‚Ä¢ üìß Email
‚Ä¢ üîó Any platform

Privacy Features:
‚Ä¢ ü•∑ Anonymous sender protection
‚Ä¢ üîí Stealth address technology
‚Ä¢ üßæ ZK proof receipts

Dashboard: ${this.DSTEALTH_APP_URL}`;

        case 'view-receipt':
          return `üßæ View ZK Receipt

Your cryptographic receipt will be available at:

Receipt Dashboard: ${this.DSTEALTH_APP_URL}

What's included:
‚Ä¢ üßæ Cryptographic proof of payment
‚Ä¢ üîí Privacy-preserving verification
‚Ä¢ üìä Transaction analytics
‚Ä¢ üèÜ Privacy rewards earned

Why ZK receipts?
‚Ä¢ Prove payment without revealing sender identity
‚Ä¢ Earn privacy rewards for stealth transactions
‚Ä¢ Build reputation in privacy-first economy`;

        case 'create-another':
          return `‚ûï Create Another Payment Link

Ready to create another payment link?

Examples:
‚Ä¢ "create payment link for $25"
‚Ä¢ "create payment link for $100"
‚Ä¢ "create payment link for $500"

Features:
‚Ä¢ ü•∑ Anonymous sender privacy
‚Ä¢ ‚ö° Direct to stealth address
‚Ä¢ üéØ Earn privacy rewards
‚Ä¢ üßæ ZK proof receipts

Just say the amount: "create payment link for $X"`;

        case 'send-transaction':
          return `üí∞ Send Transaction

Ready to send your transaction? Use Coinbase Wallet to complete the payment:

üì± Open Coinbase Wallet
üí≥ Navigate to your payment
üöÄ Confirm and send

Features:
‚Ä¢ ü•∑ Anonymous sender privacy
‚Ä¢ ‚ö° Direct to stealth address
‚Ä¢ üßæ ZK proof receipt
‚Ä¢ üéØ Earn privacy rewards

Your transaction will be processed securely through the stealth protocol.`;

        case 'open-daimo-link':
          return `üîó Open Daimo Payment Link

The Daimo payment link has been created! You can:

üìã Copy the link from the previous message
üåê Open it in any browser
üí≥ Complete payment with any wallet
üì± Share with others to receive payments

Daimo Features:
‚Ä¢ ‚ö° Fast Base network payments
‚Ä¢ üí∞ USDC transactions
‚Ä¢ üîó Universal payment links
‚Ä¢ üõ°Ô∏è Secure transactions

The link works with any wallet that supports Base network.`;

        // Legacy support for old simple IDs (just in case)
        case 'test':
        case 'balance':
        case 'payment':
        case 'help':
          console.log(`üîÑ Legacy action ID detected: ${baseActionId}`);
          return this.handleIntentMessage({...intent, actionId: baseActionId === 'test' ? 'test-simple' : 
                                                             baseActionId === 'balance' ? 'check-balance' :
                                                             baseActionId === 'payment' ? 'create-payment-link' :
                                                             'get-help'}, senderInboxId);

        default:
          console.log(`‚ùì Unknown base action ID: "${baseActionId}" from full ID: "${actionId}"`);
          return `‚ùì Unknown Action: ${baseActionId}

This action isn't recognized. Available actions:
‚Ä¢ üß™ Test Button (test-simple)
‚Ä¢ üí∞ Check Balance (check-balance)
‚Ä¢ üí≥ Create Payment Link (create-payment-link)
‚Ä¢ üîë Setup fkey.id (setup-fkey)
‚Ä¢ üîó Manage Links (manage-links)
‚Ä¢ üìä Check Status (check-status)
‚Ä¢ ‚ùì Get Help (get-help)

Debug Info:
‚Ä¢ Full Action ID: ${actionId}
‚Ä¢ Extracted Base ID: ${baseActionId}

Need help? Type /help for all commands!`;
      }
    } catch (error) {
      console.error("‚ùå Error handling Intent message:", error);
      return `‚ùå Error Processing Action

Something went wrong processing your action. Please try:
‚Ä¢ Type /help for available commands
‚Ä¢ Contact support if the issue persists

Error: ${error instanceof Error ? error.message : "Unknown error"}`;
    }
  }

  /**
   * üîß TBA PATTERN: Send help actions message (following TBA pattern)
   */
  private async sendHelpActionsMessage(senderInboxId: string): Promise<void> {
    try {
      if (!this.client) {
        console.log("‚ö†Ô∏è Base agent not available, skipping Help Actions message");
        return;
      }

      // Get user's conversations to send actions to
      const conversations = await this.client.conversations.list();
      
      // Find the conversation with this user
      const userConversation = conversations.find(conv => {
        // For DMs, check if this is a 1:1 conversation with the user
        if (!(conv instanceof Group)) {
          return conv.peerInboxId === senderInboxId;
        }
        return false;
      });

      if (!userConversation) {
        console.log("‚ö†Ô∏è User conversation not found, skipping Help Actions message");
        return;
      }

      // Generate unique timestamp for this render to reset button states
      const renderTimestamp = Date.now();
      const randomSuffix = Math.random().toString(36).substring(2, 8);

      // Create Actions content with unique everything for complete state reset
      const actionsContent: ActionsContent = {
        id: `help-actions-${renderTimestamp}-${randomSuffix}`,
        description: `ü§ñ dStealth Agent - Choose an action (${new Date().toLocaleTimeString()}):`,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours from now
        actions: [
          {
            id: `test-simple-${renderTimestamp}-${randomSuffix}`,
            label: "üß™ Test Button",
            style: "primary"
          },
          {
            id: `check-balance-${renderTimestamp}-${randomSuffix}`,
            label: "üí∞ Check Balance",
            style: "secondary"
          },
          {
            id: `create-payment-link-${renderTimestamp}-${randomSuffix}`,
            label: "üí≥ Create Payment Link",
            style: "primary"
          },
          {
            id: `get-help-${renderTimestamp}-${randomSuffix}`,
            label: "‚ùì Get Help",
            style: "secondary"
          }
        ]
      };

      // Send actions using the ActionsCodec
      await userConversation.send(actionsContent, ContentTypeActions);
      console.log(`‚úÖ Help Actions sent with unique ID: ${actionsContent.id}`);
      
      // Store this as the latest action set for this user
      this.userLatestActionSetId.set(senderInboxId, actionsContent.id);
      console.log(`üìã Stored latest action set ID for user ${senderInboxId}: ${actionsContent.id}`);

    } catch (error) {
      console.error("‚ùå Error sending Help Actions:", error);
    }
  }

  /**
   * üîß TBA PATTERN: Send actions menu
   */
  private async sendActionsMenu(senderInboxId: string): Promise<void> {
    try {
      if (!this.client) {
        console.log("‚ö†Ô∏è Base agent not available, skipping Actions menu");
        return;
      }

      // Get user's conversations to send actions to
      const conversations = await this.client.conversations.list();
      
      // Find the conversation with this user
      const userConversation = conversations.find(conv => {
        // For DMs, check if this is a 1:1 conversation with the user
        if (!(conv instanceof Group)) {
          return conv.peerInboxId === senderInboxId;
        }
        return false;
      });

      if (!userConversation) {
        console.log("‚ö†Ô∏è User conversation not found, skipping Actions menu");
        return;
      }

      // Generate unique timestamp for this render to reset button states
      const renderTimestamp = Date.now();
      const randomSuffix = Math.random().toString(36).substring(2, 8);

      // Create comprehensive Actions menu with unique everything
      const actionsContent: ActionsContent = {
        id: `actions-menu-${renderTimestamp}-${randomSuffix}`,
        description: `ü•∑ dStealth Agent - Full Actions Menu (${new Date().toLocaleTimeString()}):`,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours from now
        actions: [
          {
            id: `setup-fkey-${renderTimestamp}-${randomSuffix}`,
            label: "üîë Setup fkey.id",
            style: "primary"
          },
          {
            id: `check-balance-${renderTimestamp}-${randomSuffix}`,
            label: "üí∞ Check Balance",
            style: "secondary"
          },
          {
            id: `create-payment-link-${renderTimestamp}-${randomSuffix}`,
            label: "üí≥ Create Payment Link",
            style: "primary"
          },
          {
            id: `manage-links-${renderTimestamp}-${randomSuffix}`,
            label: "üîó Manage Links",
            style: "secondary"
          },
          {
            id: `check-status-${renderTimestamp}-${randomSuffix}`,
            label: "üìä Check Status",
            style: "secondary"
          }
        ]
      };

      // Send actions using the ActionsCodec
      await userConversation.send(actionsContent, ContentTypeActions);
      console.log(`‚úÖ Actions Menu sent with unique ID: ${actionsContent.id}`);
      
      // Store this as the latest action set for this user
      this.userLatestActionSetId.set(senderInboxId, actionsContent.id);
      console.log(`üìã Stored latest action set ID for user ${senderInboxId}: ${actionsContent.id}`);

    } catch (error) {
      console.error("‚ùå Error sending Actions Menu:", error);
    }
  }

  /**
   * üîß FIXED: Send payment-related actions - Now uses senderInboxId like other methods
   */
  private async sendTransactionActions(
    senderInboxId: string,
    amount: string,
    fkeyId: string,
    daimoLink: string,
    stealthAddress: string
  ): Promise<void> {
    try {
      if (!this.client) {
        console.log("‚ö†Ô∏è Base agent not available, skipping Transaction Actions");
        return;
      }

      // Get user's conversations to send actions to (same pattern as other methods)
      const conversations = await this.client.conversations.list();
      
      // Find the conversation with this user
      const userConversation = conversations.find(conv => {
        // For DMs, check if this is a 1:1 conversation with the user
        if (!(conv instanceof Group)) {
          return conv.peerInboxId === senderInboxId;
        }
        return false;
      });

      if (!userConversation) {
        console.log("‚ö†Ô∏è User conversation not found, skipping Transaction Actions");
        return;
      }

      // Generate unique timestamp for this render to reset button states
      const renderTimestamp = Date.now();
      const randomSuffix = Math.random().toString(36).substring(2, 8);

      // Create transaction-related Actions content with unique everything
      const actionsContent: ActionsContent = {
        id: `transaction-actions-${renderTimestamp}-${randomSuffix}`,
        description: `üí≥ Payment Link Created for ${fkeyId}.fkey.id ($${amount} USDC) - ${new Date().toLocaleTimeString()}`,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours from now
        actions: [
          {
            id: `send-transaction-${renderTimestamp}-${randomSuffix}`,
            label: "üí∞ Send Transaction",
            style: "primary"
          },
          {
            id: `open-daimo-link-${renderTimestamp}-${randomSuffix}`,
            label: "üîó Open Daimo Link",
            style: "secondary"
          },
          {
            id: `share-link-${renderTimestamp}-${randomSuffix}`,
            label: "üì§ Share Link",
            style: "secondary"
          },
          {
            id: `create-another-${renderTimestamp}-${randomSuffix}`,
            label: "‚ûï Create Another",
            style: "primary"
          }
        ]
      };

      // Send actions using the ActionsCodec
      await userConversation.send(actionsContent, ContentTypeActions);
      console.log(`‚úÖ Transaction Actions sent with unique ID: ${actionsContent.id}`);
      
      // Store this as the latest action set for this user
      this.userLatestActionSetId.set(senderInboxId, actionsContent.id);
      console.log(`üìã Stored latest action set ID for user ${senderInboxId}: ${actionsContent.id}`);

    } catch (error) {
      console.error("‚ùå Error sending Transaction Actions:", error);
    }
  }
}